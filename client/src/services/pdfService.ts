import { shortenReportId } from "@/herlpers";

// Interface for PDF generation
export interface PDFReportData {
  report_id: string;
  patient_demographics: any;
  test_date: string;
  raw_data: any;
  predicted_values: any;
  percent_predicted: any;
  quality_metrics: any;
  interpretation: any;
  triage_assessment: any;
  report_content: any;
  quality_assessment: any;
  generated_by: string;
  generated_at: string;
  processing_metadata: any;
}

// Interface for PDF generation options
export interface PDFGenerationOptions {
  enabledSections?: string[];
}

/**
 * Generate a professional PDF report from the report data
 * @param reportData - The complete report data
 * @param options - Optional generation options including enabled sections
 * @returns Promise with the PDF blob
 */
export async function generatePDFReport(
  reportData: PDFReportData, 
  options: PDFGenerationOptions = {}
): Promise<Blob> {
  console.log("[pdfService] Generating PDF for report:", reportData.report_id);
  
  try {
    // Create the PDF content using jsPDF
    const { jsPDF } = await import('jspdf');
    const doc = new jsPDF();
    
    // Set document properties
    doc.setProperties({
      title: `PFT Report - ${shortenReportId(reportData.report_id)}`,
      subject: 'Pulmonary Function Test Report',
      author: reportData.generated_by,
      creator: 'AutoPFTReport System'
    });

    let yPosition = 20;
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 20;
    const contentWidth = pageWidth - (margin * 2);

    // Helper function to add text with word wrapping
    const addWrappedText = (text: string, y: number, fontSize: number = 12, isBold: boolean = false) => {
      doc.setFontSize(fontSize);
      if (isBold) doc.setFont('helvetica', 'bold');
      else doc.setFont('helvetica', 'normal');
      
      const lines = doc.splitTextToSize(text, contentWidth);
      doc.text(lines, margin, y);
      return y + (lines.length * fontSize * 0.4);
    };

    // Helper function to add section header
    const addSectionHeader = (title: string, y: number) => {
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(0, 100, 0); // Green color
      doc.text(title, margin, y);
      doc.setTextColor(0, 0, 0); // Reset to black
      return y + 8;
    };

    // Helper function to add table
    const addTable = (headers: string[], data: any[][], startY: number) => {
      const colWidth = contentWidth / headers.length;
      let currentY = startY;

      // Add headers
      doc.setFontSize(10);
      doc.setFont('helvetica', 'bold');
      headers.forEach((header, index) => {
        doc.text(header, margin + (index * colWidth), currentY);
      });
      currentY += 6;

      // Add data rows
      doc.setFont('helvetica', 'normal');
      data.forEach(row => {
        row.forEach((cell, index) => {
          const cellText = cell?.toString() || '-';
          const lines = doc.splitTextToSize(cellText, colWidth - 2);
          doc.text(lines, margin + (index * colWidth), currentY);
        });
        currentY += 6;
      });

      return currentY + 5;
    };

    // Helper function to check if we need a new page
    const checkNewPage = (y: number, requiredSpace: number = 20) => {
      const pageHeight = doc.internal.pageSize.getHeight();
      if (y + requiredSpace > pageHeight - margin) {
        doc.addPage();
        return 20;
      }
      return y;
    };

    // Helper function to check if a section should be included
    const shouldIncludeSection = (sectionId: string): boolean => {
      if (!options.enabledSections || options.enabledSections.length === 0) {
        return true; // Include all sections if none specified
      }
      return options.enabledSections.includes(sectionId);
    };

    // 1. Report Header
    if (shouldIncludeSection('report_header')) {
      yPosition = addSectionHeader('PULMONARY FUNCTION TEST REPORT', yPosition);
      yPosition = addWrappedText(`Report ID: ${shortenReportId(reportData.report_id)}`, yPosition, 10);
      yPosition = addWrappedText(`Generated: ${new Date(reportData.generated_at).toLocaleString()}`, yPosition, 10);
      yPosition = addWrappedText(`Generated by: ${reportData.generated_by}`, yPosition, 10);
      yPosition += 10;
    }

    // 2. Patient Demographics
    if (shouldIncludeSection('patient_demographics')) {
      yPosition = checkNewPage(yPosition);
      yPosition = addSectionHeader('PATIENT DEMOGRAPHICS', yPosition);
      const demographics = reportData.patient_demographics;
      yPosition = addWrappedText(`Patient ID: ${demographics?.patient_id || 'N/A'}`, yPosition, 10);
      yPosition = addWrappedText(`Age: ${demographics?.age || 'N/A'} years`, yPosition, 10);
      yPosition = addWrappedText(`Gender: ${demographics?.gender || 'N/A'}`, yPosition, 10);
      yPosition = addWrappedText(`Height: ${demographics?.height || 'N/A'} cm`, yPosition, 10);
      yPosition = addWrappedText(`Weight: ${demographics?.weight || 'N/A'} kg`, yPosition, 10);
      yPosition = addWrappedText(`Ethnicity: ${demographics?.ethnicity || 'N/A'}`, yPosition, 10);
      yPosition = addWrappedText(`Smoking Status: ${demographics?.smoking_status || 'N/A'}`, yPosition, 10);
      yPosition += 10;
    }

    // 3. Test Information
    if (shouldIncludeSection('test_information')) {
      yPosition = checkNewPage(yPosition);
      yPosition = addSectionHeader('TEST INFORMATION', yPosition);
      yPosition = addWrappedText(`Test Date: ${reportData.test_date || 'N/A'}`, yPosition, 10);
      yPosition = addWrappedText(`Workflow Version: ${reportData.processing_metadata?.workflow_version || 'N/A'}`, yPosition, 10);
      yPosition = addWrappedText(`Agents Used: ${reportData.processing_metadata?.agents_used?.join(', ') || 'N/A'}`, yPosition, 10);
      yPosition += 10;
    }

    // 4. Raw Data & Predicted Values
    if (shouldIncludeSection('pft_results')) {
      yPosition = checkNewPage(yPosition, 40);
      yPosition = addSectionHeader('PFT RESULTS', yPosition);
      
      const rawData = reportData.raw_data;
      const predictedData = reportData.predicted_values;
      const percentData = reportData.percent_predicted;

      if (rawData) {
        const tableHeaders = ['Parameter', 'Measured', 'Predicted', '% Predicted'];
        const tableData = [
          ['FVC', rawData.fvc || 'N/A', predictedData?.fvc || 'N/A', percentData?.fvc || 'N/A'],
          ['FEV₁', rawData.fev1 || 'N/A', predictedData?.fev1 || 'N/A', percentData?.fev1 || 'N/A'],
          ['PEF', rawData.pef || 'N/A', predictedData?.pef || 'N/A', percentData?.pef || 'N/A'],
          ['FEF₂₅–₇₅', rawData.fef2575 || 'N/A', predictedData?.fef2575 || 'N/A', percentData?.fef2575 || 'N/A']
        ];
        yPosition = addTable(tableHeaders, tableData, yPosition);
      }
    }

    // 5. Quality Metrics
    if (shouldIncludeSection('quality_metrics')) {
      yPosition = checkNewPage(yPosition);
      yPosition = addSectionHeader('QUALITY METRICS', yPosition);
      const qualityMetrics = reportData.quality_metrics;
      if (qualityMetrics) {
        yPosition = addWrappedText(`Data Completeness: ${qualityMetrics.data_completeness || 'N/A'}%`, yPosition, 10);
        yPosition = addWrappedText(`Measurement Quality: ${qualityMetrics.measurement_quality || 'N/A'}`, yPosition, 10);
        yPosition = addWrappedText(`Missing Parameters: ${qualityMetrics.missing_parameters?.join(', ') || 'None'}`, yPosition, 10);
        yPosition = addWrappedText(`Data Quality Issues: ${qualityMetrics.data_quality_issues?.join(', ') || 'None'}`, yPosition, 10);
      }
      yPosition += 10;
    }

    // 6. Interpretation
    if (shouldIncludeSection('interpretation')) {
      yPosition = checkNewPage(yPosition);
      yPosition = addSectionHeader('INTERPRETATION', yPosition);
      const interpretation = reportData.interpretation;
      if (interpretation) {
        yPosition = addWrappedText(`Pattern: ${interpretation.pattern || 'N/A'}`, yPosition, 10);
        yPosition = addWrappedText(`Severity: ${interpretation.severity || 'N/A'}`, yPosition, 10);
        yPosition = addWrappedText(`Obstruction: ${interpretation.obstruction ? 'Yes' : 'No'}`, yPosition, 10);
        yPosition = addWrappedText(`Restriction: ${interpretation.restriction ? 'Yes' : 'No'}`, yPosition, 10);
        yPosition = addWrappedText(`Reversibility: ${interpretation.reversibility || 'N/A'}`, yPosition, 10);
        yPosition = addWrappedText(`Key Findings: ${interpretation.key_findings?.join(', ') || 'N/A'}`, yPosition, 10);
        yPosition = addWrappedText(`Clinical Significance: ${interpretation.clinical_significance || 'N/A'}`, yPosition, 10);
      }
      yPosition += 10;
    }

    // 7. Triage Assessment
    if (shouldIncludeSection('triage_assessment')) {
      yPosition = checkNewPage(yPosition);
      yPosition = addSectionHeader('TRIAGE ASSESSMENT', yPosition);
      const triage = reportData.triage_assessment;
      if (triage) {
        yPosition = addWrappedText(`Level: ${triage.level || 'N/A'}`, yPosition, 10);
        yPosition = addWrappedText(`Reasons: ${triage.reasons?.join(', ') || 'N/A'}`, yPosition, 10);
        yPosition = addWrappedText(`Recommended Follow-up: ${triage.follow_up_recommended || 'N/A'}`, yPosition, 10);
        yPosition = addWrappedText(`Immediate Actions: ${triage.immediate_actions?.join(', ') || 'None'}`, yPosition, 10);
      }
      yPosition += 10;
    }

    // 8. Report Content
    if (shouldIncludeSection('clinical_summary')) {
      yPosition = checkNewPage(yPosition);
      yPosition = addSectionHeader('CLINICAL SUMMARY', yPosition);
      const reportContent = reportData.report_content;
      if (reportContent?.clinical_summary) {
        yPosition = addWrappedText(reportContent.clinical_summary, yPosition, 10);
        yPosition += 5;
      }
    }

    if (shouldIncludeSection('detailed_interpretation')) {
      yPosition = checkNewPage(yPosition);
      yPosition = addSectionHeader('DETAILED INTERPRETATION', yPosition);
      const reportContent = reportData.report_content;
      if (reportContent?.detailed_interpretation) {
        yPosition = addWrappedText(reportContent.detailed_interpretation, yPosition, 10);
        yPosition += 5;
      }
    }

    if (shouldIncludeSection('recommendations')) {
      yPosition = checkNewPage(yPosition);
      yPosition = addSectionHeader('RECOMMENDATIONS', yPosition);
      const reportContent = reportData.report_content;
      if (reportContent?.recommendations_text) {
        yPosition = addWrappedText(reportContent.recommendations_text, yPosition, 10);
        yPosition += 5;
      }
    }

    // 9. Quality Assessment
    if (shouldIncludeSection('quality_assessment')) {
      yPosition = checkNewPage(yPosition);
      yPosition = addSectionHeader('QUALITY ASSESSMENT', yPosition);
      const qualityAssessment = reportData.quality_assessment;
      if (qualityAssessment) {
        yPosition = addWrappedText(`Overall Quality: ${qualityAssessment.overall_quality || 'N/A'}/10`, yPosition, 10);
        yPosition = addWrappedText(`Completeness: ${qualityAssessment.completeness || 'N/A'}/10`, yPosition, 10);
        yPosition = addWrappedText(`Clarity: ${qualityAssessment.clarity || 'N/A'}/10`, yPosition, 10);
        yPosition = addWrappedText(`Medical Accuracy: ${qualityAssessment.medical_accuracy || 'N/A'}/10`, yPosition, 10);
        yPosition = addWrappedText(`Approval Status: ${qualityAssessment.approval_status || 'N/A'}`, yPosition, 10);
      }
    }

    // 10. Processing Metadata
    if (shouldIncludeSection('processing_metadata')) {
      yPosition = checkNewPage(yPosition);
      yPosition = addSectionHeader('PROCESSING METADATA', yPosition);
      const metadata = reportData.processing_metadata;
      if (metadata) {
        yPosition = addWrappedText(`Processing Time: ≈${(metadata.processing_time / 60).toFixed(1)} minutes`, yPosition, 10);
        yPosition = addWrappedText(`Agents Used: ${metadata.agents_used?.join(', ') || 'N/A'}`, yPosition, 10);
      }
    }

    // Generate PDF blob
    const pdfBlob = doc.output('blob');
    console.log("[pdfService] PDF generated successfully");
    
    return pdfBlob;
    
  } catch (error) {
    console.error("[pdfService] Error generating PDF:", error);
    throw new Error('Failed to generate PDF report');
  }
}

/**
 * Download the PDF report
 * @param reportData - The report data
 * @param options - Optional generation options including enabled sections
 * @param filename - Optional custom filename
 */
export async function downloadPDFReport(
  reportData: PDFReportData, 
  options: PDFGenerationOptions = {},
  filename?: string
): Promise<void> {
  try {
    const pdfBlob = await generatePDFReport(reportData, options);
    const defaultFilename = `PFT_Report_${shortenReportId(reportData.report_id)}_${new Date().toISOString().split('T')[0]}.pdf`;
    const finalFilename = filename || defaultFilename;
    
    // Create download link
    const url = URL.createObjectURL(pdfBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = finalFilename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log("[pdfService] PDF downloaded successfully:", finalFilename);
  } catch (error) {
    console.error("[pdfService] Error downloading PDF:", error);
    throw error;
  }
} 